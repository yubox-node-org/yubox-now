if (document.readyState == 'loading') {
    document.addEventListener('DOMContentLoaded', yuboxSetupAllTabs);
} else {
    yuboxSetupAllTabs();
}

yuboxBSEvt = (s) => s;

function yuboxSetupAllTabs()
{
    if (typeof bootstrap == 'undefined') {
        let copyDataNS = function (el, source, target) {
            for (let k in el.dataset) {
                if (k.length <= source.length) continue;
                if (!k.startsWith(source)) continue;
                let rest = k.substring(source.length);
                let firstletter = rest.substring(0, 1);
                if (firstletter.toUpperCase() != firstletter) continue;

                let k2 = target + rest;
                el.dataset[k2] = el.dataset[k];
            }

            for (let childElement of el.children) copyDataNS(childElement, source, target);
        };

        if (typeof coreui == 'object') {
            bootstrap = coreui;
            yuboxBSEvt = (s) => s.replace('.bs.', '.coreui.');
            copyDataNS(document.getElementsByTagName('body')[0], 'bs', 'coreui');
        }
    }

{{#modules}}
    {{#module_setupjs}}
    {{{module_setupjs}}}();
    {{/module_setupjs}}
{{/modules}}

    // Mostrar el tab preparado por omisión como activo
    const tab = document.querySelector('ul#yuboxMainTab a.set-active');
    tab.classList.remove('set-active');
    const bsTab = new bootstrap.Tab(tab);
    bsTab.show();
}

{{#modules}}
{{{module_content}}}
{{/modules}}

function yuboxAPI(s)
{
    var mockup =  window.location.pathname.startsWith('/yubox-mockup/');
    return mockup
        ? '/yubox-mockup/'+s+'.php'
        : '/yubox-api/'+s;
}

function yuboxMostrarAlertText(alertstyle, text, timeout)
{
    const content = document.createElement('span');
    content.textContent = text;
    return yuboxMostrarAlert(alertstyle, content, timeout);
}

function yuboxMostrarAlert(alertstyle, content, timeout)
{
    return yuboxDlgMostrarAlert('main > div.container', alertstyle, content, timeout);
}

function yuboxDlgMostrarAlertText(basesel, alertstyle, text, timeout)
{
    const content = document.createElement('span');
    content.textContent = text;
    return yuboxDlgMostrarAlert(basesel, alertstyle, content, timeout);
}

function yuboxDlgMostrarAlert(basesel, alertstyle, content, timeout)
{
    basesel = yuboxUnwrapJQ(basesel);
    if (typeof basesel == 'string') basesel = document.querySelector(basesel);

    // Buscar plantilla de mensaje alerta, clonar y preparar con estilo
    const tpl_al = basesel.querySelector('div.alert.yubox-alert-template');
    const al = tpl_al.cloneNode(true);
    al.classList.remove('yubox-alert-template');
    al.classList.add('yubox-alert');
    al.classList.add('alert-'+alertstyle);

    // Insertar contenido DOM que es texto del mensaje
    content = yuboxUnwrapJQ(content);
    al.querySelector('button.btn-close').insertAdjacentElement('beforebegin', content);

    // Quitar cualquier alarma vieja, insertar la nueva
    const old_al = basesel.querySelector('div.yubox-alert');
    if (old_al != null && old_al.parentNode !== null) old_al.parentNode.removeChild(old_al);
    tpl_al.insertAdjacentElement('afterend', al);

    // Quitar mensaje de alarma luego de timeout
    if (timeout != undefined) {
        setTimeout(function() {
            if (al.parentNode !== null) al.parentNode.removeChild(al);
        }, timeout);
    }

    return yuboxWrapJQ(al);
}

function yuboxStdAjaxFailHandler(e, timeout)
{
    yuboxStdAjaxFailHandlerDlg('main > div.container', e, timeout);
}

function yuboxStdAjaxFailHandlerDlg(basesel, e, timeout)
{
    let msg;
    if ('responseJSON' in e) {
        if ('msg' in e.responseJSON)
            msg = e.responseJSON.msg;
        else
            msg = 'Tipo de contenido inesperado en respuesta';
    } else if ('status' in e && e.status == 0) {
        msg = 'Fallo al contactar dispositivo';
    } else {
        msg = e.message;
    }

    yuboxDlgMostrarAlertText(basesel, 'danger', msg, timeout);
}

function getYuboxPane(modname, raw = false)
{
    let dom = document.querySelector('div#yuboxMainTabContent > div.tab-pane#'+modname);
    return raw ? dom : yuboxWrapJQ(dom);
}
function getYuboxNavTab(modname, raw = false)
{
    let dom = document.querySelector('ul#yuboxMainTab a#'+modname+'-tab[data-bs-toggle="tab"]');
    return raw ? dom : yuboxWrapJQ(dom);
}

function yuboxFetch(module, rsrc = '', postData = null)
{
    let method = (postData == null) ? 'GET' : 'POST';
    return yuboxFetchMethod(method, module, rsrc, postData);
}

function yuboxFetchURL(url, postData = null)
{
    let method = (postData == null) ? 'GET' : 'POST';
    return yuboxFetchMethodURL(method, url, postData);
}

function yuboxFetchMethod(method, module, rsrc = '', postData = null)
{
    let url = yuboxAPI(module);
    if (rsrc != '') url += '/' + rsrc;

    return yuboxFetchMethodURL(method, url, postData);
}

function yuboxFetchMethodURL(method, url, postData = null)
{
    // Decidir Content-Type
    if (postData != null) {
        if (postData instanceof FormData) {
        } else if (postData instanceof URLSearchParams) {
        } else {
            // Se asume objeto ordinario
            postData = new URLSearchParams(postData);
        }
    }

    let init = {
        method: method
    };
    if (postData != null) init['body'] = postData;
    return fetch(url, init)
    .then(response => {
        let p;

        if (response.status == 204) {
            // Voy a asumir que realmente no hay más contenido
            p = Promise.resolve(null);
        } else {
            let ct = response.headers.get('content-type');
            if (ct.toLowerCase().indexOf('application/json') == 0)
                p = response.json();
            else if (ct.toLowerCase().indexOf('text/plain') == 0)
                p =  response.text();
            else if (ct.toLowerCase().indexOf('text/html') == 0)
                p = response.text(); // TODO: parseo?
            else
                p = response.blob(); // ¿Es esto lo más útil?
        }
        return p
        .then(data => {
            if (!response.ok) {
                let e = new Error(response.statusText, { cause: response });
                e.responseJSON = data;
                throw e;
            }
            return data;
        });
    });
}

// Las siguientes dos funciones envuelven un DOM pelado en jQuery, y lo extraen
// de un objeto jQuery, si jQuery está presente. De lo contrario, no hacen nada.
function yuboxWrapJQ(domobj)
{
    if (typeof jQuery == 'undefined') return domobj;
    return $(domobj);
}
function yuboxUnwrapJQ(jqobj)
{
    if (typeof jQuery == 'undefined') return jqobj;
    if (!(jqobj instanceof jQuery)) return jqobj;
    if (jqobj.length > 0) return jqobj[0];
    return null;
}