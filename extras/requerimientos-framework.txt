Requerimientos para framework de aplicaciones YUBOX sobre ESP32
---------------------------------------------------------------

General
-------
- (YA) De alguna manera volver componible la interfaz, de forma que se puedan almacenar fragmentos
  de HTTP y Javascript y combinarlos a partir de múltiples proyectos en el archivo final
  index.htm y yuboxapp.js que luego deben zipearse para SPIFFS

Interfaz web
------------
- (YA) Basada en JQuery+Bootstrap últimas versiones
- (YA) Interfaz debe SIEMPRE pedir autenticación
- (YA) Single Page Application, debe cargar HTML base una sola vez, interactuar vía AJAX, WebSockets
  |- Investigar si vale la pena usar React.js para desarrollo (NO CoreUI, muy pesado)
- (YA) Variables guardadas vía biblioteca Preferences.h

WiFi
----
- (YA) Debe de soportarse modo hostAP, el cual debe estar activo SIEMPRE, incluso si ya se conectó a otra red
- (YA) Nombre de red HostAP por omisión debe ser único por chip, posiblemente generado vía MAC
- (YA) Soporte de múltiples redes descubiertas, debe conectarse a la mejor posible por omisión
- (PROBAR ENTERPRISE) Administración Web de conexiones Wifi (ingresar clave, olvidar red, modo autenticación enterprise)
  \- ver celular para ejemplo de interfaz administración
- (YA) Integración MDNS para localizar aparato en red WiFi, debe publicar existencia de puerto 80 HTTP
- Envío de muestras a recolector vía HTTP/HTTPS/MQTT como sea soportado, payload urlencoded (form) o JSON
  - (YA) MQTT
  - HTTP/HTTPS
    - form urlencoded
    - json
    - InfluxDB

OTA
---
- (YA) Soporte de actualizar firmware a partir de upload vía interfaz administrativa
- Soporte de actualizar firmware mandando a YUBOX a pedir firmware a un URL conocido externo
  |- verificación periódica de actualizaciones sin intervención humana
  |- bandera de si aplicar actualización una vez detectada que existe

NTP y reloj
-----------
- (YA) Programa debe arrancar incluso si no hay NTP. Si una hora es obligatoria, el procesamiento debe estar detenido hasta que se consiga una hora
  |- (YA) Interfaz administrativa debe estar disponible incluso en ausencia de NTP, sólo debe congelarse la funcionalidad que requiere hora real
- (YA) Interfaz debe permitir configurar un servidor NTP (por omisión pool.ntp.org)
- (YA) Interfaz debe permitir configurar zona horaria como offset GMT (por omisión GMT-5 Ecuador)
- Como fallback, si se tiene una conexión Wifi con acceso al exterior, una petición HTTPS de HEAD puede devolver una cabecera Date: que puede parsearse para tener una fecha y hora inicial GMT.
- Última hora válida (NTP o HTTP) debe almacenarse regularmente como preferencia (flash) para reducir error en caso de reseteo y conexión internet no disponible
- (YA) Soporte opcional reloj RTC en lugar de preferencia flash

GSM/GPRS
--------
- Soporte opcional para módulo GSM SIM800L para enviar muestras/OTA/NTP
  |- Usar pila TCP/IP de módulo GSM para HTTP o TCP/IP en bruto
  |- Configurar APN y username/clave vía web en caso necesario
  |- Consulta de estado SIM y de red celular desde interfaz web
  |- Segunda fuente de NTP vía pila TCP/IP, véase NTP más arriba

Aplicación y sensores
---------------------
- Identificación de aparato frente a colector datos debe poderse configurar vía web
- Investigar si MQTT puede redirigirse a través de websocket en YUBOX/ESP32, necesario en entorno restrictivo como la ESPOL
- Debe desarrollarse para cada aplicación su integración con la interfaz web de configuración

Gráficos
--------
- Incluir chart.js si se tiene requerimiento de gráficos
- Datos en tiempo real usando websockets, actualizar HTML+gráficos

Tareas Yubox Framework:
- WiFi:
  - en caso de desconexión, si red era con credenciales correctas, debería intentar reconectarse a la misma red antes de escanear redes disponibles
  - mostrar, para redes detectadas en escaneo, cuáles no están conectadas pero tienen credenciales guardadas
  - implementar lista de redes con credenciales guardadas que NO son visibles, con opción a BORRAR
  - implementar ingreso a mano de red que no es visible (todavía), no debe anclarse a este ingreso

- NTP: 
  - (suspendido) implementar vía AsyncUDP
    - sólo resolver IP una vez al arrancar o al setear vía web
  - configuración de servidor NTP vía web
  - leer servidor NTP vía NVRAM, por omisión pool.ntp.org (verificar este nombre de host)
- OTA: implementar
  - verificación servidor remoto por si hay archivo actualizado
    - Usar biblioteca async de petición web?
  - (YA) carga explícita de archivo actualizado
  - (YA) decidir formato de archivo actualizado
    - (YA) debe contener opcionalmente tanto código como contenido SPIFFS
    - (YA) contenido SPIFFS debe declararse y almacenarse para distinguir de posibles archivos que NO DEBEN SER BORRADOS
    - (YA) NO sobreescribir directamente la partición SPIFFS, porque puede tener archivos que hay que preservar
    - (YA: tinytar, ugzip) usar tar? usar gz?
  https://makitweb.com/how-to-upload-image-file-using-ajax-and-jquery/
  https://developer.mozilla.org/en-US/docs/Web/API/FormData
  https://github.com/tobozo/ESP32-targz/ implementa flashear desde tgz en SPIFFS, contiene TinyUntar modificado para streaming

